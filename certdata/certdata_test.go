/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package certdata

import (
	"bufio"
	"bytes"
	"io/ioutil"
	"net/http"
	"strings"
	"testing"
)

type otest struct {
	octal string
	bytes []byte
}

// Comparing output to https://cryptii.com/octal/decimal
var octalTests = []otest{
	otest{`\060\127\061\013\060\011\006\003\125\004\006\023\002\102\105\061\031\060\027\006\003\125\004\012\023\020\107\154\157\142\141\154\123\151\147\156\040\156\166\055\163\141\061\020\060\016\006\003\125\004\013\023\007\122\157\157\164\040\103\101\061\033\060\031\006\003\125\004\003\023\022\107\154\157\142\141\154\123\151\147\156\040\122\157\157\164\040\103\101`,
		[]byte{48, 87, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 66, 69, 49, 25, 48, 23, 6, 3, 85, 4, 10, 19, 16, 71, 108, 111, 98, 97, 108, 83, 105, 103, 110, 32, 110, 118, 45, 115, 97, 49, 16, 48, 14, 6, 3, 85, 4, 11, 19, 7, 82, 111, 111, 116, 32, 67, 65, 49, 27, 48, 25, 6, 3, 85, 4, 3, 19, 18, 71, 108, 111, 98, 97, 108, 83, 105, 103, 110, 32, 82, 111, 111, 116, 32, 67, 65}}}

func TestOctal(t *testing.T) {
	for _, test := range octalTests {
		b, err := otobs(test.octal)
		if err != nil {
			t.Error(err)
		}
		if !bytes.Equal(test.bytes, b) {
			t.Errorf("Error decoding %v. Got %v expected %v", test.octal, b, test.bytes)
		}
	}
}

// Extract only counts until it gets everything it needs from object, in this case up to and including
// CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_NOT_TRUSTED
const (
	distrustLineCount              = 17
	distrustCommonName             = ""
	distrustOrganization           = "Equifax"
	distrustOrganizationalUnitName = "Equifax Secure Certificate Authority"
	distrustSerialNumber           = "157914"
	distrustPEM                    = ""
	distrust                       = `CKA_TOKEN CK_BBOOL CK_TRUE
CKA_PRIVATE CK_BBOOL CK_FALSE
CKA_MODIFIABLE CK_BBOOL CK_FALSE
CKA_LABEL UTF8 "Distrust a pb.com certificate that does not comply with the baseline requirements."
CKA_ISSUER MULTILINE_OCTAL
\060\116\061\013\060\011\006\003\125\004\006\023\002\125\123\061
\020\060\016\006\003\125\004\012\023\007\105\161\165\151\146\141
\170\061\055\060\053\006\003\125\004\013\023\044\105\161\165\151
\146\141\170\040\123\145\143\165\162\145\040\103\145\162\164\151
\146\151\143\141\164\145\040\101\165\164\150\157\162\151\164\171
END
CKA_SERIAL_NUMBER MULTILINE_OCTAL
\002\003\025\171\024
END
CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_NOT_TRUSTED
CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_NOT_TRUSTED
CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_NOT_TRUSTED
CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE`
)

func TestExtractDistrust(t *testing.T) {
	b := bufio.NewReader(strings.NewReader(distrust))
	c, lc, err := Extract(b, 0, true, "fname")
	if err != nil {
		t.Error(err)
	}
	if lc != distrustLineCount {
		t.Errorf("Counted the incorrect number of lines. Got %v, expected %v", lc, distrustLineCount)
	}
	if c.CommonName != distrustCommonName {
		t.Errorf("Incorrect Common Name. Got %v, expected %v", c.CommonName, distrustCommonName)
	}
	if c.OrganizationName != distrustOrganization {
		t.Errorf("Incorrect Organization Name. Got %v, expected %v", c.OrganizationName, distrustOrganization)
	}
	if c.OrganizationalUnitName != distrustOrganizationalUnitName {
		t.Errorf("Incorrect Organizational Unit Name. Got %v, expected %v", c.OrganizationalUnitName, distrustOrganizationalUnitName)
	}
	if c.SerialNumber != distrustSerialNumber {
		t.Errorf("Incorrect Serial Number. Got %v, expected %v", c.SerialNumber, distrustSerialNumber)
	}
}

const (
	certLineCount   = 119 // Again, counting up to and including the CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_TRUSTED_DELEGATOR.
	certCommonName  = "GlobalSign Root CA"
	certOrgName     = "GlobalSign nv-sa"
	certOrgUnitName = "Root CA"
	certSerial      = "40000000001154b5ac394"
	certPEM         = `-----BEGIN CERTIFICATE-----
MIIDdTCCAl2gAwIBAgILBAAAAAABFUtaw5QwDQYJKoZIhvcNAQEFBQAwVzELMAkG
A1UEBhMCQkUxGTAXBgNVBAoTEEdsb2JhbFNpZ24gbnYtc2ExEDAOBgNVBAsTB1Jv
b3QgQ0ExGzAZBgNVBAMTEkdsb2JhbFNpZ24gUm9vdCBDQTAeFw05ODA5MDExMjAw
MDBaFw0yODAxMjgxMjAwMDBaMFcxCzAJBgNVBAYTAkJFMRkwFwYDVQQKExBHbG9i
YWxTaWduIG52LXNhMRAwDgYDVQQLEwdSb290IENBMRswGQYDVQQDExJHbG9iYWxT
aWduIFJvb3QgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDaDuaZ
jc6j40+Kfvvxi4Mla+pIH/EqsLmVEQS98GPR4mdmzxzdzxtIK+6NiY6arymAZavp
xy0Sy6scTHAHoT0KMM0VjU/43dSMUBUc71DuxC73/OlS8pF94G3VNTCOXkNz8kHp
1Wrjsok6Vjk4bwY8iGlbKk3Fp1S4bInMm/k8yuX9ifUSPJJ4ltbcdG6TRGHRjcdG
snUOhugZitVtbNV4FpWi6cgKOOvyJBNPc1STE4U6G7weNLWLBYy5d4ux2x8gkasJ
U26Qzns3dLlwR5EiUWMWea6xrkEmCMgZK9FGqkjWZCrXgzT/LCrBbBlDSgeF59N8
9iFo7+ryUp9/k5DPAgMBAAGjQjBAMA4GA1UdDwEB/wQEAwIBBjAPBgNVHRMBAf8E
BTADAQH/MB0GA1UdDgQWBBRge2YaRQ2XyolQL30EzTSo//z9SzANBgkqhkiG9w0B
AQUFAAOCAQEA1nPnfE920I2/7LqivjTFKDK1fPxsnCwrvQmeU79rXqoRSLblCKOz
yj1hTdNGCbM+w6DjY1Ub8rrvrTnhQ7k4o+YviiY776BQVvnGCv04zcQLcFGUl5gE
38NflNUVyRRBnMRddWQVDf9VMOyGj/8N7yy5Y0b2qvzfvGn9LhJIZJrglfCm7ymP
AbEVtQwdpf5pLGkkeB6zpxxxYu7KyJesF12KwvhHhm4qxFYxldBniYUr+WymXUad
DKqC5JlR3XC321Y9YeRq4VzW9v493kHMB65jUr9TU/Qr6cf9tveCX4XSQRjbgbME
HMUfpIBvFSDJ3gyICh3WZlXi/EjJKSZp4A==
-----END CERTIFICATE-----`
	certificate = `CKA_TOKEN CK_BBOOL CK_TRUE
CKA_PRIVATE CK_BBOOL CK_FALSE
CKA_MODIFIABLE CK_BBOOL CK_FALSE
CKA_LABEL UTF8 "GlobalSign Root CA"
CKA_CERTIFICATE_TYPE CK_CERTIFICATE_TYPE CKC_X_509
CKA_SUBJECT MULTILINE_OCTAL
\060\127\061\013\060\011\006\003\125\004\006\023\002\102\105\061
\031\060\027\006\003\125\004\012\023\020\107\154\157\142\141\154
\123\151\147\156\040\156\166\055\163\141\061\020\060\016\006\003
\125\004\013\023\007\122\157\157\164\040\103\101\061\033\060\031
\006\003\125\004\003\023\022\107\154\157\142\141\154\123\151\147
\156\040\122\157\157\164\040\103\101
END
CKA_ID UTF8 "0"
CKA_ISSUER MULTILINE_OCTAL
\060\127\061\013\060\011\006\003\125\004\006\023\002\102\105\061
\031\060\027\006\003\125\004\012\023\020\107\154\157\142\141\154
\123\151\147\156\040\156\166\055\163\141\061\020\060\016\006\003
\125\004\013\023\007\122\157\157\164\040\103\101\061\033\060\031
\006\003\125\004\003\023\022\107\154\157\142\141\154\123\151\147
\156\040\122\157\157\164\040\103\101
END
CKA_SERIAL_NUMBER MULTILINE_OCTAL
\002\013\004\000\000\000\000\001\025\113\132\303\224
END
CKA_VALUE MULTILINE_OCTAL
\060\202\003\165\060\202\002\135\240\003\002\001\002\002\013\004
\000\000\000\000\001\025\113\132\303\224\060\015\006\011\052\206
\110\206\367\015\001\001\005\005\000\060\127\061\013\060\011\006
\003\125\004\006\023\002\102\105\061\031\060\027\006\003\125\004
\012\023\020\107\154\157\142\141\154\123\151\147\156\040\156\166
\055\163\141\061\020\060\016\006\003\125\004\013\023\007\122\157
\157\164\040\103\101\061\033\060\031\006\003\125\004\003\023\022
\107\154\157\142\141\154\123\151\147\156\040\122\157\157\164\040
\103\101\060\036\027\015\071\070\060\071\060\061\061\062\060\060
\060\060\132\027\015\062\070\060\061\062\070\061\062\060\060\060
\060\132\060\127\061\013\060\011\006\003\125\004\006\023\002\102
\105\061\031\060\027\006\003\125\004\012\023\020\107\154\157\142
\141\154\123\151\147\156\040\156\166\055\163\141\061\020\060\016
\006\003\125\004\013\023\007\122\157\157\164\040\103\101\061\033
\060\031\006\003\125\004\003\023\022\107\154\157\142\141\154\123
\151\147\156\040\122\157\157\164\040\103\101\060\202\001\042\060
\015\006\011\052\206\110\206\367\015\001\001\001\005\000\003\202
\001\017\000\060\202\001\012\002\202\001\001\000\332\016\346\231
\215\316\243\343\117\212\176\373\361\213\203\045\153\352\110\037
\361\052\260\271\225\021\004\275\360\143\321\342\147\146\317\034
\335\317\033\110\053\356\215\211\216\232\257\051\200\145\253\351
\307\055\022\313\253\034\114\160\007\241\075\012\060\315\025\215
\117\370\335\324\214\120\025\034\357\120\356\304\056\367\374\351
\122\362\221\175\340\155\325\065\060\216\136\103\163\362\101\351
\325\152\343\262\211\072\126\071\070\157\006\074\210\151\133\052
\115\305\247\124\270\154\211\314\233\371\074\312\345\375\211\365
\022\074\222\170\226\326\334\164\156\223\104\141\321\215\307\106
\262\165\016\206\350\031\212\325\155\154\325\170\026\225\242\351
\310\012\070\353\362\044\023\117\163\124\223\023\205\072\033\274
\036\064\265\213\005\214\271\167\213\261\333\037\040\221\253\011
\123\156\220\316\173\067\164\271\160\107\221\042\121\143\026\171
\256\261\256\101\046\010\310\031\053\321\106\252\110\326\144\052
\327\203\064\377\054\052\301\154\031\103\112\007\205\347\323\174
\366\041\150\357\352\362\122\237\177\223\220\317\002\003\001\000
\001\243\102\060\100\060\016\006\003\125\035\017\001\001\377\004
\004\003\002\001\006\060\017\006\003\125\035\023\001\001\377\004
\005\060\003\001\001\377\060\035\006\003\125\035\016\004\026\004
\024\140\173\146\032\105\015\227\312\211\120\057\175\004\315\064
\250\377\374\375\113\060\015\006\011\052\206\110\206\367\015\001
\001\005\005\000\003\202\001\001\000\326\163\347\174\117\166\320
\215\277\354\272\242\276\064\305\050\062\265\174\374\154\234\054
\053\275\011\236\123\277\153\136\252\021\110\266\345\010\243\263
\312\075\141\115\323\106\011\263\076\303\240\343\143\125\033\362
\272\357\255\071\341\103\271\070\243\346\057\212\046\073\357\240
\120\126\371\306\012\375\070\315\304\013\160\121\224\227\230\004
\337\303\137\224\325\025\311\024\101\234\304\135\165\144\025\015
\377\125\060\354\206\217\377\015\357\054\271\143\106\366\252\374
\337\274\151\375\056\022\110\144\232\340\225\360\246\357\051\217
\001\261\025\265\014\035\245\376\151\054\151\044\170\036\263\247
\034\161\142\356\312\310\227\254\027\135\212\302\370\107\206\156
\052\304\126\061\225\320\147\211\205\053\371\154\246\135\106\235
\014\252\202\344\231\121\335\160\267\333\126\075\141\344\152\341
\134\326\366\376\075\336\101\314\007\256\143\122\277\123\123\364
\053\351\307\375\266\367\202\137\205\322\101\030\333\201\263\004
\034\305\037\244\200\157\025\040\311\336\014\210\012\035\326\146
\125\342\374\110\311\051\046\151\340
END
CKA_NSS_MOZILLA_CA_POLICY CK_BBOOL CK_TRUE

# Trust for Certificate "GlobalSign Root CA"
# Issuer: CN=GlobalSign Root CA,OU=Root CA,O=GlobalSign nv-sa,C=BE
# Serial Number:04:00:00:00:00:01:15:4b:5a:c3:94
# Subject: CN=GlobalSign Root CA,OU=Root CA,O=GlobalSign nv-sa,C=BE
# Not Valid Before: Tue Sep 01 12:00:00 1998
# Not Valid After : Fri Jan 28 12:00:00 2028
# Fingerprint (MD5): 3E:45:52:15:09:51:92:E1:B7:5D:37:9F:B1:87:29:8A
# Fingerprint (SHA1): B1:BC:96:8B:D4:F4:9D:62:2A:A8:9A:81:F2:15:01:52:A4:1D:82:9C
CKA_CLASS CK_OBJECT_CLASS CKO_NSS_TRUST
CKA_TOKEN CK_BBOOL CK_TRUE
CKA_PRIVATE CK_BBOOL CK_FALSE
CKA_MODIFIABLE CK_BBOOL CK_FALSE
CKA_LABEL UTF8 "GlobalSign Root CA"
CKA_CERT_SHA1_HASH MULTILINE_OCTAL
\261\274\226\213\324\364\235\142\052\250\232\201\362\025\001\122
\244\035\202\234
END
CKA_CERT_MD5_HASH MULTILINE_OCTAL
\076\105\122\025\011\121\222\341\267\135\067\237\261\207\051\212
END
CKA_ISSUER MULTILINE_OCTAL
\060\127\061\013\060\011\006\003\125\004\006\023\002\102\105\061
\031\060\027\006\003\125\004\012\023\020\107\154\157\142\141\154
\123\151\147\156\040\156\166\055\163\141\061\020\060\016\006\003
\125\004\013\023\007\122\157\157\164\040\103\101\061\033\060\031
\006\003\125\004\003\023\022\107\154\157\142\141\154\123\151\147
\156\040\122\157\157\164\040\103\101
END
CKA_SERIAL_NUMBER MULTILINE_OCTAL
\002\013\004\000\000\000\000\001\025\113\132\303\224
END
CKA_TRUST_SERVER_AUTH CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
CKA_TRUST_EMAIL_PROTECTION CK_TRUST CKT_NSS_TRUSTED_DELEGATOR
CKA_TRUST_CODE_SIGNING CK_TRUST CKT_NSS_MUST_VERIFY_TRUST
CKA_TRUST_STEP_UP_APPROVED CK_BBOOL CK_FALSE`
)

func TestExtractCertificate(t *testing.T) {
	b := bufio.NewReader(strings.NewReader(certificate))
	c, lc, err := Extract(b, 0, false, "fname")
	if err != nil {
		t.Error(err)
	}
	if lc != certLineCount {
		t.Errorf("Counted the incorrect number of lines. Got %v, expected %v", lc, certLineCount)
	}
	if c.CommonName != certCommonName {
		t.Errorf("Incorrect Common Name. Got %v, expected %v", c.CommonName, certCommonName)
	}
	if c.OrganizationName != certOrgName {
		t.Errorf("Incorrect Organization Name. Got %v, expected %v", c.OrganizationName, certOrgName)
	}
	if c.OrganizationalUnitName != certOrgUnitName {
		t.Errorf("Incorrect Organizational Unit Name. Got %v, expected %v", c.OrganizationalUnitName, certOrgName)
	}
	if c.SerialNumber != certSerial {
		t.Errorf("Incorrect Serial Number. Got %v, expected %v", c.SerialNumber, certSerial)
	}
	if c.PEM != certPEM {
		t.Errorf("Incorrect PEM. Got %v, expected %v", c.PEM, certPEM)
	}
}

func BenchmarkCertdata(b *testing.B) {
	// Stop the benchmark so that network IO doesn't poison the test.
	b.StopTimer()
	r, err := http.Get(URL)
	if err != nil || r.StatusCode != http.StatusOK {
		b.Log("Problem fetching certdata.txt data from %s, status code %s, error %s\n", URL, r.StatusCode, err)
		b.FailNow()
	}
	c, err := ioutil.ReadAll(r.Body)
	r.Body.Close()
	if err != nil {
		b.Log("Problem reading from the response body. Got %v, error %v", c, err)
		b.FailNow()
	}
	b.StartTimer()
	for i := 0; i < b.N; i++ {
		ParseToNormalizedForm(bytes.NewReader(c))
	}
}
