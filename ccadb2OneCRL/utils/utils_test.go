/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

package utils

import (
	"bytes"
	"testing"
)

func assertBytes(t *testing.T, data string, expected []byte) {
	result, err := B64Decode(data)
	if err != nil {
		t.Errorf("Expected %s to decode to %v but error: %v", data, expected, err)
		return
	}
	if !bytes.Equal(result, expected) {
		t.Errorf("Expected %s to decode to %v but got: %v", data, expected, result)
	}
}

func TestRawSerialBytesLeadingZero(t *testing.T) {
	// DER of the tbsCertificate of TeliaSonera Gateway CA v2
	tbsCertPrefix := []byte{
		0x30, 0x82, 0x05, 0x08, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x11, 0x00,
		0x86, 0x3C, 0x75, 0x64, 0x11, 0x95, 0x85, 0x4F, 0xB4, 0x31, 0x38, 0xA0,
		0xA0, 0xCF, 0x8A, 0xA3, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86,
		0xF7, 0x0D, 0x01, 0x01, 0x0B, 0x05, 0x00, 0x30, 0x37, 0x31, 0x14, 0x30,
		0x12, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x0B, 0x54, 0x65, 0x6C, 0x69,
		0x61, 0x53, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x31, 0x1F, 0x30, 0x1D, 0x06,
		0x03, 0x55, 0x04, 0x03, 0x0C, 0x16, 0x54, 0x65, 0x6C, 0x69, 0x61, 0x53,
		0x6F, 0x6E, 0x65, 0x72, 0x61, 0x20, 0x52, 0x6F, 0x6F, 0x74, 0x20, 0x43,
		0x41, 0x20, 0x76, 0x31, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x34, 0x31, 0x30,
		0x31, 0x36, 0x30, 0x38, 0x32, 0x31, 0x32, 0x32, 0x5A, 0x17, 0x0D, 0x33,
		0x32, 0x31, 0x30, 0x31, 0x36, 0x30, 0x35, 0x30, 0x34, 0x30, 0x30, 0x5A,
		0x30, 0x47, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13,
		0x02, 0x46, 0x49, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0A,
		0x0C, 0x0B, 0x54, 0x65, 0x6C, 0x69, 0x61, 0x53, 0x6F, 0x6E, 0x65, 0x72,
		0x61, 0x31, 0x22, 0x30, 0x20, 0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x19,
		0x54, 0x65, 0x6C, 0x69, 0x61, 0x53, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x20,
		0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x20, 0x43, 0x41, 0x20, 0x76,
		0x32, 0x30, 0x82, 0x02, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48,
		0x86, 0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0F,
		0x00, 0x30, 0x82, 0x02, 0x0A, 0x02, 0x82, 0x02, 0x01, 0x00, 0x8E, 0xF9,
		0xF4, 0x7C, 0x75, 0xD6, 0xCE, 0x6E, 0x95, 0x5E, 0x1B, 0xFD, 0x44, 0x80,
		0x56, 0x9C, 0xCB, 0x78, 0xBF, 0x96, 0x26, 0xC1, 0x62, 0x99, 0x77, 0x57,
		0x55, 0x0A, 0xD7, 0x20, 0xEF, 0xF0, 0x78, 0x72, 0xCF, 0x53, 0x44, 0x38,
		0x3A, 0x71, 0x4E, 0x2D, 0x67, 0x9E, 0x2B, 0x9F, 0xA8, 0x64, 0x29, 0xD1,
		0xB9, 0x20, 0xD1, 0xD8, 0x7C, 0x06, 0x9C, 0x89, 0xA4, 0x9C, 0x7A, 0xC6,
		0x4A, 0xBA, 0xED, 0x9B, 0xB3, 0xD7, 0xD5, 0x1C, 0x41, 0x36, 0xE2, 0x11,
		0x60, 0xFF, 0x3D, 0xC3, 0x8B, 0x64, 0x15, 0x4D, 0xC8, 0xBF, 0xDA, 0x39,
		0x81, 0xE4, 0xF4, 0x4E, 0xFA, 0x7D, 0xC7, 0x70, 0x50, 0xE6, 0xD7, 0xAA,
		0x59, 0xC1, 0x11, 0x97, 0x20, 0x17, 0x03, 0x27, 0x1B, 0x61, 0xB5, 0x41,
		0x4C, 0x62, 0xCF, 0x53, 0x50, 0x13, 0x4D, 0x75, 0xD1, 0xDF, 0x55, 0xBD,
		0x5D, 0x9A, 0x8B, 0x87, 0xF9, 0x3B, 0x51, 0x02, 0x1D, 0x72, 0x2E, 0xC8,
		0x2B, 0x5C, 0x65, 0x49, 0x63, 0xD1, 0xA8, 0x04, 0x6C, 0x61, 0x14, 0x67,
		0x84, 0x76, 0xE4, 0xE7, 0xD7, 0xF5, 0x9A, 0x02, 0x5E, 0xF8, 0xFF, 0x5F,
		0x9E, 0x57, 0x67, 0x36, 0x21, 0x90, 0x67, 0x5A, 0x37, 0xC4, 0xE3, 0xF2,
		0x9C, 0x1E, 0x05, 0x7C, 0x04, 0x72, 0x4F, 0x86, 0x1B, 0x71, 0xCD, 0xB8,
		0x2B, 0x50, 0x39, 0x2F, 0xE7, 0x9C, 0x30, 0xF2, 0xF4, 0xF3, 0x81, 0x8E,
		0x13, 0x1A, 0x80, 0x04, 0x75, 0x4A, 0x3C, 0x42, 0x07, 0x88, 0xFD, 0x20,
		0x1D, 0x6E, 0x6A, 0xDA, 0x1F, 0x49, 0xAF, 0xA0, 0xE2, 0x33, 0x9E, 0x19,
		0xDE, 0x0A, 0x5B, 0x1B, 0x86, 0xA5, 0x51, 0xFB, 0x54, 0xBF, 0x8D, 0x82,
		0x7F, 0xEA, 0xE8, 0xCA, 0xC5, 0x68, 0xEC, 0xB1, 0x75, 0xF6, 0x2E, 0x61,
		0x57, 0xF3, 0x68, 0xE9, 0x21, 0x15, 0x42, 0x6B, 0x89, 0xC9, 0x0A, 0xD4,
		0x29, 0x2D, 0xDC, 0x3F, 0xB1, 0xEC, 0xE4, 0xC0, 0x96, 0x2A, 0x35, 0x4C,
		0xAD, 0xFE, 0x5A, 0x96, 0x6D, 0x2D, 0x9C, 0xFB, 0x1B, 0x7C, 0x1D, 0x56,
		0x68, 0xDD, 0xDA, 0xFD, 0xCF, 0x87, 0x71, 0x5C, 0x24, 0x88, 0x78, 0x47,
		0x69, 0x7B, 0x71, 0xA3, 0xDC, 0x0F, 0x7C, 0x6C, 0xC3, 0x05, 0x15, 0x19,
		0x2C, 0xA7, 0x8A, 0xE5, 0x0F, 0x7E, 0x63, 0xB0, 0x45, 0xF5, 0x75, 0xE5,
		0x07, 0x79, 0x31, 0x79, 0x1D, 0xFC, 0x26, 0x7E, 0xD9, 0x18, 0xC4, 0xAE,
		0x9B, 0x6A, 0x6E, 0x14, 0x63, 0xCB, 0xC3, 0xC3, 0xC5, 0xD3, 0x55, 0xB9,
		0xCD, 0x91, 0x86, 0xC7, 0x4F, 0x0B, 0x2F, 0x33, 0x5C, 0xB7, 0x42, 0xBD,
		0x39, 0x3A, 0xB3, 0xB3, 0x98, 0x5C, 0x1A, 0x09, 0x99, 0xA4, 0x7B, 0xC9,
		0x8C, 0xBF, 0xEA, 0x62, 0xDF, 0x01, 0x11, 0x9E, 0x2D, 0x6B, 0x7B, 0x8B,
		0xCB, 0x38, 0x10, 0x8B, 0x15, 0x65, 0x29, 0x04, 0x3A, 0xA3, 0xAE, 0x48,
		0x5F, 0x1E, 0x50, 0xEA, 0xF2, 0x81, 0x91, 0x1C, 0x57, 0x72, 0x0D, 0xBD,
		0x67, 0xF5, 0xFE, 0x1F, 0x20, 0xFB, 0x4B, 0x24, 0xC9, 0x24, 0x33, 0x99,
		0xFA, 0x2C, 0x5E, 0x97, 0xBD, 0x05, 0x35, 0xA2, 0x5D, 0x5D, 0x7D, 0x13,
		0xB1, 0x85, 0xBE, 0xE3, 0x10, 0xA0, 0x75, 0xC1, 0xE2, 0xC6, 0xF6, 0xA1,
		0x2A, 0xAD, 0xDA, 0x71, 0x47, 0x24, 0x39, 0xBD, 0xA8, 0x93, 0x0D, 0x9A,
		0x61, 0x4A, 0xAC, 0x97, 0x99, 0xAA, 0x77, 0xDA, 0x0A, 0x17, 0x70, 0x49,
		0xB7, 0xB9, 0x02, 0xF4, 0xF4, 0xCB, 0xB9, 0x1C, 0x7A, 0xC5, 0x30, 0x83,
		0x24, 0x5C, 0x75, 0xFE, 0x4B, 0x9D, 0x6D, 0xC9, 0x53, 0xDA, 0xBB, 0x11,
		0x75, 0xB4, 0xF8, 0x54, 0x1C, 0xC6, 0x7B, 0x80, 0x1F, 0x94, 0xAA, 0x99,
		0x92, 0x74, 0xF0, 0xC4, 0x7C, 0x86, 0x48, 0x9A, 0x67, 0x9A, 0x5F, 0x71,
		0x11, 0xEF, 0x37, 0xB2, 0x18, 0x15, 0x02, 0x03, 0x01, 0x00, 0x01, 0xA3,
		0x82, 0x02, 0x15, 0x30, 0x82, 0x02, 0x11, 0x30, 0x81, 0x8A, 0x06, 0x08,
		0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x7E, 0x30, 0x7C,
		0x30, 0x2D, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01,
		0x86, 0x21, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x6F, 0x63, 0x73,
		0x70, 0x2E, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2E, 0x74, 0x65, 0x6C, 0x69,
		0x61, 0x73, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x2E, 0x63, 0x6F, 0x6D, 0x30,
		0x4B, 0x06, 0x08, 0x2B, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86,
		0x3F, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x72, 0x65, 0x70, 0x6F,
		0x73, 0x69, 0x74, 0x6F, 0x72, 0x79, 0x2E, 0x74, 0x72, 0x75, 0x73, 0x74,
		0x2E, 0x74, 0x65, 0x6C, 0x69, 0x61, 0x73, 0x6F, 0x6E, 0x65, 0x72, 0x61,
		0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x74, 0x65, 0x6C, 0x69, 0x61, 0x73, 0x6F,
		0x6E, 0x65, 0x72, 0x61, 0x72, 0x6F, 0x6F, 0x74, 0x63, 0x61, 0x76, 0x31,
		0x2E, 0x63, 0x65, 0x72, 0x30, 0x12, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01,
		0x01, 0xFF, 0x04, 0x08, 0x30, 0x06, 0x01, 0x01, 0xFF, 0x02, 0x01, 0x00,
		0x30, 0x55, 0x06, 0x03, 0x55, 0x1D, 0x20, 0x04, 0x4E, 0x30, 0x4C, 0x30,
		0x4A, 0x06, 0x0C, 0x2B, 0x06, 0x01, 0x04, 0x01, 0x82, 0x0F, 0x02, 0x03,
		0x01, 0x01, 0x02, 0x30, 0x3A, 0x30, 0x38, 0x06, 0x08, 0x2B, 0x06, 0x01,
		0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x2C, 0x68, 0x74, 0x74, 0x70, 0x73,
		0x3A, 0x2F, 0x2F, 0x72, 0x65, 0x70, 0x6F, 0x73, 0x69, 0x74, 0x6F, 0x72,
		0x79, 0x2E, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2E, 0x74, 0x65, 0x6C, 0x69,
		0x61, 0x73, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x2E, 0x63, 0x6F, 0x6D, 0x2F,
		0x43, 0x50, 0x53, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F, 0x01, 0x01,
		0xFF, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06, 0x30, 0x81, 0xC6, 0x06, 0x03,
		0x55, 0x1D, 0x1F, 0x04, 0x81, 0xBE, 0x30, 0x81, 0xBB, 0x30, 0x40, 0xA0,
		0x3E, 0xA0, 0x3C, 0x86, 0x3A, 0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F,
		0x63, 0x72, 0x6C, 0x2D, 0x33, 0x2E, 0x74, 0x72, 0x75, 0x73, 0x74, 0x2E,
		0x74, 0x65, 0x6C, 0x69, 0x61, 0x73, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x2E,
		0x63, 0x6F, 0x6D, 0x2F, 0x74, 0x65, 0x6C, 0x69, 0x61, 0x73, 0x6F, 0x6E,
		0x65, 0x72, 0x61, 0x72, 0x6F, 0x6F, 0x74, 0x63, 0x61, 0x76, 0x31, 0x2E,
		0x63, 0x72, 0x6C, 0x30, 0x77, 0xA0, 0x75, 0xA0, 0x73, 0x86, 0x71, 0x6C,
		0x64, 0x61, 0x70, 0x3A, 0x2F, 0x2F, 0x63, 0x72, 0x6C, 0x2D, 0x31, 0x2E,
		0x74, 0x72, 0x75, 0x73, 0x74, 0x2E, 0x74, 0x65, 0x6C, 0x69, 0x61, 0x73,
		0x6F, 0x6E, 0x65, 0x72, 0x61, 0x2E, 0x63, 0x6F, 0x6D, 0x2F, 0x63, 0x6E,
		0x3D, 0x54, 0x65, 0x6C, 0x69, 0x61, 0x53, 0x6F, 0x6E, 0x65, 0x72, 0x61,
		0x25, 0x32, 0x30, 0x52, 0x6F, 0x6F, 0x74, 0x25, 0x32, 0x30, 0x43, 0x41,
		0x25, 0x32, 0x30, 0x76, 0x31, 0x2C, 0x6F, 0x3D, 0x54, 0x65, 0x6C, 0x69,
		0x61, 0x53, 0x6F, 0x6E, 0x65, 0x72, 0x61, 0x3F, 0x63, 0x65, 0x72, 0x74,
		0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x72, 0x65, 0x76, 0x6F, 0x63,
		0x61, 0x74, 0x69, 0x6F, 0x6E, 0x6C, 0x69, 0x73, 0x74, 0x3B, 0x62, 0x69,
		0x6E, 0x61, 0x72, 0x79, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E, 0x04,
		0x16, 0x04, 0x14, 0x87, 0xAA, 0xE3, 0x13, 0x12, 0x9F, 0x11, 0x8B, 0xCA,
		0x68, 0xCD, 0x1E, 0x2D, 0xC4, 0x29, 0xA8, 0xFA, 0x10, 0x1A, 0xCB, 0x30,
		0x1F, 0x06, 0x03, 0x55, 0x1D, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14,
		0xF0, 0x8F, 0x59, 0x38, 0x00, 0xB3, 0xF5, 0x8F, 0x9A, 0x96, 0x0C, 0xD5,
		0xEB, 0xFA, 0x7B, 0xAA, 0x17, 0xE8, 0x13, 0x12,
	}

	b, _ := RawSerialBytes(tbsCertPrefix)
	if !bytes.Equal(b, []byte{0x00, 0x86, 0x3c, 0x75, 0x64, 0x11, 0x95, 0x85,
		0x4f, 0xb4, 0x31, 0x38, 0xa0, 0xa0, 0xcf, 0x8a, 0xa3}) {
		t.Errorf("error")
	}
}

func TestRawSerialBytesNoLeadingZero(t *testing.T) {
	// DER of the tbsCertificate of AffirmTrust Premium ECC
	tbsCertPrefix := []byte{
		0x30, 0x82, 0x01, 0x85, 0xA0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x08, 0x74,
		0x97, 0x25, 0x8A, 0xC7, 0x3F, 0x7A, 0x54, 0x30, 0x0A, 0x06, 0x08, 0x2A,
		0x86, 0x48, 0xCE, 0x3D, 0x04, 0x03, 0x03, 0x30, 0x45, 0x31, 0x0B, 0x30,
		0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x14,
		0x30, 0x12, 0x06, 0x03, 0x55, 0x04, 0x0A, 0x0C, 0x0B, 0x41, 0x66, 0x66,
		0x69, 0x72, 0x6D, 0x54, 0x72, 0x75, 0x73, 0x74, 0x31, 0x20, 0x30, 0x1E,
		0x06, 0x03, 0x55, 0x04, 0x03, 0x0C, 0x17, 0x41, 0x66, 0x66, 0x69, 0x72,
		0x6D, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x50, 0x72, 0x65, 0x6D, 0x69,
		0x75, 0x6D, 0x20, 0x45, 0x43, 0x43, 0x30, 0x1E, 0x17, 0x0D, 0x31, 0x30,
		0x30, 0x31, 0x32, 0x39, 0x31, 0x34, 0x32, 0x30, 0x32, 0x34, 0x5A, 0x17,
		0x0D, 0x34, 0x30, 0x31, 0x32, 0x33, 0x31, 0x31, 0x34, 0x32, 0x30, 0x32,
		0x34, 0x5A, 0x30, 0x45, 0x31, 0x0B, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04,
		0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x14, 0x30, 0x12, 0x06, 0x03, 0x55,
		0x04, 0x0A, 0x0C, 0x0B, 0x41, 0x66, 0x66, 0x69, 0x72, 0x6D, 0x54, 0x72,
		0x75, 0x73, 0x74, 0x31, 0x20, 0x30, 0x1E, 0x06, 0x03, 0x55, 0x04, 0x03,
		0x0C, 0x17, 0x41, 0x66, 0x66, 0x69, 0x72, 0x6D, 0x54, 0x72, 0x75, 0x73,
		0x74, 0x20, 0x50, 0x72, 0x65, 0x6D, 0x69, 0x75, 0x6D, 0x20, 0x45, 0x43,
		0x43, 0x30, 0x76, 0x30, 0x10, 0x06, 0x07, 0x2A, 0x86, 0x48, 0xCE, 0x3D,
		0x02, 0x01, 0x06, 0x05, 0x2B, 0x81, 0x04, 0x00, 0x22, 0x03, 0x62, 0x00,
		0x04, 0x0D, 0x30, 0x5E, 0x1B, 0x15, 0x9D, 0x03, 0xD0, 0xA1, 0x79, 0x35,
		0xB7, 0x3A, 0x3C, 0x92, 0x7A, 0xCA, 0x15, 0x1C, 0xCD, 0x62, 0xF3, 0x9C,
		0x26, 0x5C, 0x07, 0x3D, 0xE5, 0x54, 0xFA, 0xA3, 0xD6, 0xCC, 0x12, 0xEA,
		0xF4, 0x14, 0x5F, 0xE8, 0x8E, 0x19, 0xAB, 0x2F, 0x2E, 0x48, 0xE6, 0xAC,
		0x18, 0x43, 0x78, 0xAC, 0xD0, 0x37, 0xC3, 0xBD, 0xB2, 0xCD, 0x2C, 0xE6,
		0x47, 0xE2, 0x1A, 0xE6, 0x63, 0xB8, 0x3D, 0x2E, 0x2F, 0x78, 0xC4, 0x4F,
		0xDB, 0xF4, 0x0F, 0xA4, 0x68, 0x4C, 0x55, 0x72, 0x6B, 0x95, 0x1D, 0x4E,
		0x18, 0x42, 0x95, 0x78, 0xCC, 0x37, 0x3C, 0x91, 0xE2, 0x9B, 0x65, 0x2B,
		0x29, 0xA3, 0x42, 0x30, 0x40, 0x30, 0x1D, 0x06, 0x03, 0x55, 0x1D, 0x0E,
		0x04, 0x16, 0x04, 0x14, 0x9A, 0xAF, 0x29, 0x7A, 0xC0, 0x11, 0x35, 0x35,
		0x26, 0x51, 0x30, 0x00, 0xC3, 0x6A, 0xFE, 0x40, 0xD5, 0xAE, 0xD6, 0x3C,
		0x30, 0x0F, 0x06, 0x03, 0x55, 0x1D, 0x13, 0x01, 0x01, 0xFF, 0x04, 0x05,
		0x30, 0x03, 0x01, 0x01, 0xFF, 0x30, 0x0E, 0x06, 0x03, 0x55, 0x1D, 0x0F,
		0x01, 0x01, 0xFF, 0x04, 0x04, 0x03, 0x02, 0x01, 0x06,
	}

	b, _ := RawSerialBytes(tbsCertPrefix)
	if !bytes.Equal(b, []byte{0x74, 0x97, 0x25, 0x8A, 0xC7, 0x3F, 0x7A, 0x54}) {
		t.Errorf("error")
	}
}

func TestBase64Decoder(t *testing.T) {
	// Tolerate spaces
	assertBytes(t, "b2theSB0aGVyZQ==", []byte("okay there"))
	assertBytes(t, "b2theSB0aGVyZQ== ", []byte("okay there"))
	assertBytes(t, " b2theSB0aGVyZQ==", []byte("okay there"))
	assertBytes(t, " b2theSB0aGVyZQ== ", []byte("okay there"))

	// Handle high bytes
	assertBytes(t, "/+7dzLuqmYg=", []byte{0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88})

	// Handle having no padding
	assertBytes(t, "/+7dzLuqmYg", []byte{0xFF, 0xEE, 0xDD, 0xCC, 0xBB, 0xAA, 0x99, 0x88})
}
